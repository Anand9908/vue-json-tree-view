{"version":3,"sources":["webpack:///webpack:///src/components/tree-view/TreeViewItem.vue","webpack:///webpack:///src/components/tree-view/TreeView.vue"],"names":[],"mappings":";AA+EA;EACA;EACA;EACA;CACA;AAEA;EACA;EACA;EACA;CACA;AAEA;EACA;CACA;AAEA;EACA;CACA;AAEA;EACA;CACA;AAGA;IACA;IACA;IACA;CACA;AAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACA;AAEA;EACA;CACA;;ACpCA;EACA;CACA;;AAEA;AACA;EACA;CACA;;AAEA;AACA;EACA;CACA","file":"vue-json-tree-view.css","sourcesContent":["<template>\n  <div class=\"tree-view-item\">\n    <div v-if=\"isObject(data)\" class=\"tree-view-item-leaf\">\n      <div class=\"tree-view-item-node\" @click.stop=\"toggleOpen()\">\n        <span :class=\"{opened: isOpen()}\" v-if=\"!isRootObject(data)\" class=\"tree-view-item-key tree-view-item-key-with-chevron\">{{getKey(data)}}</span>\n        <span class=\"tree-view-item-hint\" v-show=\"!isOpen() && data.children.length === 1\">{{data.children.length}} property</span>\n        <span class=\"tree-view-item-hint\" v-show=\"!isOpen() && data.children.length !== 1\">{{data.children.length}} properties</span>\n      </div>\n      <tree-view-item :max-depth=\"maxDepth\" :current-depth=\"currentDepth+1\" v-show=\"isOpen()\" v-for=\"child in data.children\" :data=\"child\"></tree-view-item>\n    </div>\n    <div v-if=\"isArray(data)\" class=\"tree-view-item-leaf\">\n      <div class=\"tree-view-item-node\" @click.stop=\"toggleOpen()\">\n        <span :class=\"{opened: isOpen()}\" v-if=\"!isRootObject(data)\" class=\"tree-view-item-key tree-view-item-key-with-chevron\">{{getKey(data)}}</span>\n        <span class=\"tree-view-item-hint\" v-show=\"!isOpen() && data.children.length === 1\">{{data.children.length}} item</span>\n        <span class=\"tree-view-item-hint\" v-show=\"!isOpen() && data.children.length !== 1\">{{data.children.length}} items</span>\n      </div>\n      <tree-view-item :max-depth=\"maxDepth\" :current-depth=\"currentDepth+1\" v-show=\"isOpen()\" v-for=\"child in data.children\" :data=\"child\"></tree-view-item>\n    </div>\n    <div class=\"tree-view-item-leaf\" v-if=\"isValue(data)\">\n      <span class=\"tree-view-item-key\">{{getKey(data)}}</span>\n      <span class=\"tree-view-item-value\">{{getValue(data)}}\n    </div>\n  </div>\n</template>\n\n<script>\n\n  import _ from 'lodash'\n\n  export default {\n  \tname: \"tree-view-item\",\n    props: [\"data\", \"max-depth\", \"current-depth\"],\n    data: function(){\n    \treturn {\n      \topen: this.currentDepth < this.maxDepth\n      }\n    },\n    methods: {\n    \tisOpen: function(){\n      \treturn this.isRootObject(this.data) || this.open;\n      },\n      toggleOpen:function(){\n      \tthis.open = !this.open;\n      },\n    \tisObject: function(value){\n      \treturn value.type === 'object';\n      },\n    \tisArray: function(value){\n      \treturn value.type === 'array';\n      },\n      isValue: function(value){\n      \treturn value.type === 'value';\n      },\n      getKey: function(value){\n      \tif (_.isInteger(value.key)) {\n        \treturn value.key+\":\";\n        } else {\n  \t      return \"\\\"\"+ value.key + \"\\\":\";\n        }\n      },\n      getValue: function(value){\n      \tif (_.isNumber(value.value)) {\n        \treturn value.value\n        }\n        if (_.isNull(value.value)) {\n        \treturn \"null\"\n        }\n        if (_.isString(value.value)) {}\n      \treturn \"\\\"\"+value.value+\"\\\"\";\n      },\n      isRootObject: function(value){\n      \treturn value.isRoot;\n      }\n    }\n  };\n</script>\n\n<style scoped>\n\n.tree-view-item {\n  font-family: monospace;\n  font-size: 14px;\n  margin-left: 18px;\n}\n\n.tree-view-item-node {\n  cursor: pointer;\n  position: relative;\n  white-space: nowrap;\n}\n\n.tree-view-item-leaf {\n  white-space: nowrap;\n}\n\n.tree-view-item-key {\n  font-weight: bold;\n}\n\n.tree-view-item-key-with-chevron {\n  padding-left: 14px;\n}\n\n\n.tree-view-item-key-with-chevron.opened::before {\n    top:4px;\n    transform: rotate(90deg);\n    -webkit-transform: rotate(90deg);\n}\n\n.tree-view-item-key-with-chevron::before {\n    color: #444;\n    content: '\\25b6';\n    font-size: 10px;\n    left: 1px;\n    position: absolute;\n    top: 3px;\n    transition: -webkit-transform .1s ease;\n    transition: transform .1s ease;\n    transition: transform .1s ease, -webkit-transform .1s ease;\n    -webkit-transition: -webkit-transform .1s ease;\n}\n\n.tree-view-item-hint {\n  color: #ccc\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// webpack:///src/components/tree-view/TreeViewItem.vue?3cebb5b2","<template>\n  <div class=\"tree-view-wrapper\">\n    <tree-view-item class=\"tree-view-item-root\" :data=\"parsedData\" :max-depth=\"maxDepth\" :currentDepth=\"0\"></tree-view-item>\n  </div>\n</template>\n\n<script>\n  import _ from 'lodash';\n  import TreeViewItem from './TreeViewItem.vue';\n\n  export default {\n    components:{\n      TreeViewItem\n    },\n  \tname: \"tree-view\",\n    props: [\"data\", \"max-depth\"],\n    methods: {\n\n    \t// Transformer for the non-Collection types,\n      // like String, Integer of Float\n      transformValue: function(valueToTransform, keyForValue){\n      \treturn {\n        \tkey: keyForValue,\n          type: \"value\",\n          value: valueToTransform\n        }\n      },\n\n    \t// Since we use lodash, the _.map method will work on\n      // both Objects and Arrays, returning either the Key as\n      // a string or the Index as an integer\n    \tgenerateChildrenFromCollection: function(collection){\n  \t\t\treturn _.map(collection, (value, keyOrIndex)=>{\n            if (this.isObject(value)) {\n              return this.transformObject(value, keyOrIndex);\n            }\n            if (this.isArray(value)) {\n              return this.transformArray(value, keyOrIndex);\n            }\n            if (this.isValue(value)) {\n              return this.transformValue(value, keyOrIndex);\n            }\n          }) ;\n      },\n\n    \t// Transformer for the Array type\n      transformArray: function(arrayToTransform, keyForArray){\n      \treturn {\n        \tkey: keyForArray,\n          type: \"array\",\n          children: this.generateChildrenFromCollection(arrayToTransform)\n        }\n      },\n\n      // Transformer for the Object type\n    \ttransformObject: function(objectToTransform, keyForObject, isRootObject = false){\n        return {\n        \tkey: keyForObject,\n        \ttype: \"object\",\n          isRoot: isRootObject,\n          children: this.generateChildrenFromCollection(objectToTransform)\n        }\n      },\n\n      // Helper Methods for value type detection\n      isObject: function(value){\n      \treturn _.isPlainObject(value);\n      },\n\n      isArray: function(value){\n      \treturn _.isArray(value);\n      },\n\n      isValue: function(value){\n      \treturn !this.isObject(value) && !this.isArray(value);\n      }\n    },\n    computed: {\n    \tparsedData: function(){\n      \t// Take the JSON data and transform\n        // it into the Tree View DSL\n  \t    return this.transformObject(this.data, \"root\", true);\n      }\n    }\n  };\n</script>\n\n<style>\n\n.tree-view-wrapper {\n  overflow: auto;\n}\n\n/* Find the first nested node and override the indentation */\n.tree-view-item-root > .tree-view-item-leaf > .tree-view-item {\n  margin-left: 0!important;\n}\n\n/* Root node should not be indented */\n.tree-view-item-root {\n  margin-left: 0!important;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// webpack:///src/components/tree-view/TreeView.vue?1e04093d"],"sourceRoot":""}